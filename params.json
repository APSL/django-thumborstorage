{"name":"Django-thumborstorage","tagline":"A Django custom storage for Thumbor backend","body":"=====================\r\ndjango-thumborstorage\r\n=====================\r\n\r\n.. image:: https://coveralls.io/repos/Starou/django-thumborstorage/badge.png?branch=master\r\n  :target: https://coveralls.io/r/Starou/django-thumborstorage?branch=master\r\n\r\n.. image:: https://pypip.in/v/django-thumborstorage/badge.png\r\n  :target: https://pypi.python.org/pypi/django-thumborstorage\r\n\r\n\r\nA Django custom storage for Thumbor backend.\r\n\r\nThis app provide 2 classes ``ThumborStorage`` and ``ThumborMigrationStorage``. The last one\r\nis a storage you can use for ``Imagefield`` initialy using a ``FileSystemStorage`` you want\r\nto migrate to Thumbor without batch-moving all of them. That way, Django continues to serve\r\nthem from the file system until you change the image on that field.\r\n\r\n\r\nInstall\r\n=======\r\n\r\n::\r\n\r\n    pip install django-thumborstorage\r\n\r\n\r\nDependencies\r\n''''''''''''\r\n\r\n* Python 2.6 or 2.7\r\n* Django-1.5.x\r\n* Requests_\r\n* Libthumbor_\r\n\r\nRecommended:\r\n\r\n* Django-thumbor_ (to manage thumbnails).\r\n* Thumbor_\r\n\r\n\r\nUsage\r\n=====\r\n\r\nsettings.py\r\n'''''''''''\r\n\r\nAdd ``django-thumborstorage`` in your ``INSTALLED_APPS``.\r\n\r\nAnd set the following:\r\n\r\n.. code-block:: python\r\n\r\n    THUMBOR_SERVER = 'http://localhost:8888'\r\n    THUMBOR_SECURITY_KEY = 'MY_SECURE_KEY'\r\n    # This may be a different host than THUMBOR_SERVER\r\n    # only reachable by your Django server.\r\n    THUMBOR_RW_SERVER = 'http://localhost:8888'\r\n\r\n\r\n\r\nmodels.py\r\n'''''''''\r\n\r\nJust set the ``storage`` parameter in the ImageField you want to manage with Thumbor:\r\n\r\n.. code-block:: python\r\n\r\n    from django_thumborstorage.storages import ThumborStorage\r\n\r\n    class Stuff(models.Model):\r\n        def upload_path(instance, filename):\r\n            return 'stuffs/%s' % filename\r\n        photo = models.ImageField(upload_to=upload_path,\r\n                                  storage=ThumborStorage(),\r\n                                  height_field='photo_height',\r\n                                  width_field='photo_width')\r\n        photo_height = models.IntegerField(blank=True, null=True)\r\n        photo_width = models.IntegerField(blank=True, null=True)\r\n\r\n\r\nIn the code\r\n'''''''''''\r\n\r\nYou can get the Thumbor ``uuid`` from the ``<ImageField>`` instance using:\r\n\r\n.. code-block:: python\r\n\r\n    my_stuff.photo.storage.key(my_stuff.photo.name)\r\n\r\nThis is useful to `generate_url()` with Django-thumbor_ when original files are stored on Thumbor. Thus,\r\nyou can pass the key as url parameter.\r\n\r\n\r\nCHANGELOG\r\n=========\r\n\r\n0.91.5\r\n''''''\r\n\r\n* Use THUMBOR_SERVER to generate the original file url.\r\n\r\nBackward imcompatibilities\r\n--------------------------\r\n\r\n* ``THUMBOR_SERVER`` and ``THUMBOR_SECURITY_KEY`` are required in settings.\r\n\r\n\r\n0.91.4\r\n''''''\r\n\r\n* Add ``ThumborStorage.key(name)`` to retrieve the Thumbor uuid from the name.\r\n\r\n\r\n0.91.3\r\n''''''\r\n\r\nBackward imcompatibilities\r\n--------------------------\r\n\r\n* ``THUMBOR_WRITABLE_SERVER`` setting is replaced by ``THUMBOR_RW_SERVER`` since it is now used to retrieve the\r\n  original file.\r\n\r\n\r\n\r\nTODO\r\n====\r\n\r\n* PUT\r\n\r\n.. _Requests: http://www.python-requests.org/en/latest/\r\n.. _Thumbor: https://github.com/globocom/thumbor\r\n.. _Libthumbor: https://github.com/heynemann/libthumbor\r\n.. _Django-thumbor: https://django-thumbor.readthedocs.org/en/latest/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}